Class ThreadPool.Handler Extends %RegisteredObject
{

// Метод динамического управления процессами

ClassMethod JobManaging()
{
	set n = 0
	set n1 = 0
	set n2 = 0
	FOR
	{
		
		//if (((n2<n1)&&(n1<n)) ||((n2=n1)&&(n1<n))||((n2<n1)&&(n1=n))||((n>n1)||(n>n2)))
		if (n2<((n1+n)/2))
		{
			if (^ThreadPoolData("ThreadsCount")<^ThreadPoolSettings("Settings","MaxThreadNum"))
			{
				JOB $CLASSMETHOD("ThreadPool.Handler","JobStack",1)::10
				LOCK +^ThreadPoolData("ThreadsCount")
				set ^ThreadPoolData("ThreadsCount") = ^ThreadPoolData("ThreadsCount")+1
				LOCK -^ThreadPoolData("ThreadsCount")
			}
		}
		
		H 5
		set n2 = n1
		set n1 = n
		set n = ^ThreadPoolData("TasksCount")
		
	}
}

// метод для обработки очередью

ClassMethod JobStack(dyn As %Integer)
{
	
	Set reqId = ""
		For {
			QUIT:^ThreadPoolData("stop")="STOP"
			set reqId = ##class(ThreadPool.Handler).WaitTask(dyn)
			if reqId = -1
			{
				q
			}
			
			do ##class(ThreadPool.Handler).JobForEach(reqId)		
			
			
		}
}

// Метод полученя id задачи из очереди

ClassMethod WaitTask(dyn As %Integer) As %Integer
{
	set resId = ""
	set attempt = 0
	set selfkill = 0
	for
	{
		if (dyn = 1)&&(attempt>^ThreadPoolSettings("Settings","DynamicThreadLifeTime"))
		{
			set selfkill = 1
				
		}
		quit:(dyn = 1)&&(attempt>^ThreadPoolSettings("Settings","DynamicThreadLifeTime"))
		QUIT:^ThreadPoolData("stop")="STOP"
		LOCK +^ThreadPoolData("Tasks")
		set id = $P(^ThreadPoolData("Tasks"),";",1)
		if id'=""
		{
			set ^ThreadPoolData("Tasks") = $REPLACE(^ThreadPoolData("Tasks"),id_";","",1)
			set resId = id
			LOCK +^ThreadPoolData("TasksCount")
			set ^ThreadPoolData("TasksCount") = ^ThreadPoolData("TasksCount") -1
			LOCK -^ThreadPoolData("TasksCount")
		}
		LOCK -^ThreadPoolData("Tasks")
		Quit:id'=""
		H 0.001
		set attempt = attempt+1
	}
	if (selfkill = 1)
	{
		LOCK +^ThreadPoolData("ThreadsCount")
		set ^ThreadPoolData("ThreadsCount") = ^ThreadPoolData("ThreadsCount")-1
		LOCK -^ThreadPoolData("ThreadsCount")
		q -1
	}
	q resId
}

// Метод управления очередью задач

ClassMethod StackManage()
{
		
	set ^ThreadPoolData("Tasks") = "" 
	
	set errlog = ""
	set ^ThreadPoolData("stop") = ""
		while ^ThreadPoolData("stop")'= "STOP"
		{
			try
			{
				set reqResultSet = ##class(%ResultSet).%New()
	 			set reqResultSet.ClassName = "ThreadPool.Request"
	 			set reqResultSet.QueryName = "GetWaiting"
	 			set newTasks = ""
	 			$$$TOE(sc, reqResultSet.Execute())
	 			set count = 0
	 			while reqResultSet.Next()
	 			{
		 			set id = reqResultSet.Get("ID")
		 			set newTasks = newTasks_id_";"
		 			set req = ##class(ThreadPool.Request).%OpenId(id)
		 			set req.RequestStatus = "IN_STACK"	
		 			$$$TOE(sc, req.%Save())	 	
		 			set count = count+1		
	 			}
	 			
	 			
	 			
	 			L +^ThreadPoolData("Tasks")
	 			set ^ThreadPoolData("Tasks") = ^ThreadPoolData("Tasks")_newTasks
	 			L -^ThreadPoolData("Tasks")
	 			
	 			L +^ThreadPoolData("TasksCount")
	 			set ^ThreadPoolData("TasksCount") = ^ThreadPoolData("TasksCount")+count
	 			L -^ThreadPoolData("TasksCount")
	 			
	 			H 10
			}
			catch ex
			{
				set errlog =" "_errlog_ex.Data()
			} 
		}
		q errlog
}

// Метод обработки с вызовом процесса для каждой задачи

ClassMethod JobForEach(reqId As %Integer)
{
		try
		{		
			set req = ##class(ThreadPool.Request).%OpenId(reqId)
		
			tstart
			set req.RequestStatus = "RUNNING"
			$$$TOE(sc, req.%Save())		
			tcommit
		
		
			set req.Result =##class(ThreadPool.Handler).Count(req.RequestString)
			set req.HandledTime = $HOROLOG
			tstart		
			set req.RequestStatus = "READY"
			$$$TOE(sc, req.%Save())	
			tcommit
		
		
		}
		catch ex 
		{
			trollback
			
			set req.RequestStatus = "READY_WITH_ERROR"
			set req.ErrorData = ex.Data()

		}
}

// Метод обработки с вызовом одного процесса для всех задач

ClassMethod JobForAll()
{
	 	WHILE ^ThreadPoolData("stop")'="STOP" { 
	 		set reqResultSet = ##class(%ResultSet).%New()
	 		set reqResultSet.ClassName = "ThreadPool.Request"
	 		set reqResultSet.QueryName = "GetWaiting"
	 		
	 		TRY
	 		{
		 		$$$TOE(sc,reqResultSet.Execute())
		 		while reqResultSet.Next()
		 		{
			 		set id = reqResultSet.%Get("ID")
			 				 	
			 		try
			 		{			 		
			 			set req = ##class(ThreadPool.Request).%OpenId(id)			 	
				
						tstart
						set req.RequestStatus = "RUNNING"	
						$$$TOE(sc, req.%Save()) 
						tcommit
					
						
						set req.Result = ##class(ThreadPool.Handler).Count(req.RequestString)			 	
			 			set req.RequestStatus = "READY"
			 			set req.HandledTime = $HOROLOG
			 			tstart
						$$$TOE(sc, req.%Save())
						tcommit
			 		}
			 		catch ex 
			 		{
				 		trollback

						
						set req.RequestStatus = "READY_WITH_ERROR"
						set req.ErrorData = ex.Data()

					
			 		}
			 	
		 		}
	 		}
	 		catch ex
	 		{

				set ^ThreadPoolData("ErrorLog") = ^ThreadPoolData("ErrorLog")_" "_ex.Data()

	 		}
	 		HANG 5
	 	}
}

// считает факториал

ClassMethod Count(N As %Integer) As %String
{
	set fact = ##class(%ListOfDataTypes).%New()		
	set base = 10000000000
		do fact.Insert(1)
		
	
		do fact.Insert(0)
	
	
	
	For k=1:1:N
	{
	
	
		set carry = 0
	
	
		For i = 0:1:fact.Size
		{
			if i = fact.Size
			{
				do fact.Insert(0)
			}
			set cur =  fact.GetAt(i) * 1 * k + carry
			do fact.SetAt(cur#base,i)
			set carry = cur\base
		
	}
	
	}
	
	
	set i = fact.Size
	Do
	{
		do fact.RemoveAt(i)
		set i = i-1
	}
	While fact.GetAt(i) = 0
	
	
	
	set ret = ""
	For i = fact.Size:-1:1
	{
		set a = ""
		for j = 1:1:10-$LENGTH(fact.GetAt(i))
		{
			set a = a_"0"
		}
		set a = a_fact.GetAt(i)
		set ret = ret_a
	}
	q ret
}

}
